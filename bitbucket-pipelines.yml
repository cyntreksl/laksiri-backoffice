image: atlassian/default-image:2

definitions:
  services:
    mysql:
      image: mysql:8.0
      environment:
        MYSQL_DATABASE: 'testing'
        MYSQL_ROOT_PASSWORD: 'let_me_in'
        MYSQL_USER: 'homestead'
        MYSQL_PASSWORD: 'secret'
    redis:
      image: redis:6.2
      memory: 512  # Fixed: changed from string to integer

  steps:
    - step: &install-dependencies
        name: Install Dependencies
        image: php:8.3-fpm
        services:
          - mysql
          - redis
        caches:
          - composer
        script:
          - apt-get update && apt-get install -y unzip libzip-dev libpng-dev zip git mariadb-client
          - docker-php-ext-configure zip
          - docker-php-ext-install -j$(nproc) zip gd pcntl pdo_mysql exif bcmath
          - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
          - php -r "file_exists('.env') || copy('.env.example', '.env');"
          - composer install --no-interaction
          - php artisan key:generate

    - step: &build-frontend
        name: Build Frontend
        image: node:20.17.0
        caches:
          - node
        script:
          - npm ci
          - npm run build
        artifacts:
          - public/build/
        

    - step: &run-tests
        name: Run Tests
        image: php:8.3-fpm
        services:
          - mysql
          - redis
        script:
          - docker-php-ext-install pdo_mysql
          - vendor/bin/pint --test
          - php artisan test

    - step: &package-application
        name: Package Application
        script:
          - zip -r application.zip -r * .[^.]* -x "vendor/*" -x "node_modules/*"
        artifacts:
          - application.zip

    - step: &deploy
        name: Deploy to Environment
        deployment: $DEPLOYMENT_ENV
        script:
          - mkdir -p ~/.ssh
          - echo $EC2_SSH_KEY_BASE64 | base64 -d > ~/.ssh/id_rsa
          - chmod 600 ~/.ssh/id_rsa
          - ssh-keyscan -H $HOST >> ~/.ssh/known_hosts
          - scp application.zip $EC2_USER@$HOST:/tmp/app.zip
          - ssh $EC2_USER@$HOST << EOF
            set -e
            unzip -o /tmp/app.zip -d $DEPLOY_PATH
            cd $DEPLOY_PATH
            composer install --no-dev --optimize-autoloader
            php artisan migrate --force
            php artisan config:clear
            php artisan cache:clear
            EOF

pipelines:
  pull-requests:
    '**':
      - step: *install-dependencies
      - step: *build-frontend
#      - step: *run-tests

  custom:
    deploy-to-staging:
      - step: *install-dependencies
      - step: *build-frontend
#      - step: *run-tests
      - step: *package-application
      - step:
          <<: *deploy
          deployment: staging
          variables:
            DEPLOYMENT_ENV: 'staging'

    deploy-to-production:
      - step: *install-dependencies
      - step: *build-frontend
#      - step: *run-tests
      - step: *package-application
      - step:
          <<: *deploy
          deployment: production
          variables:
            DEPLOYMENT_ENV: 'production'

  branches:
    staging:
      - step: *install-dependencies
      - step: *build-frontend
#      - step: *run-tests
      - step: *package-application
      - step:
          <<: *deploy
          deployment: staging
          variables:
            DEPLOYMENT_ENV: 'staging'

    master:
      - step: *install-dependencies
      - step: *build-frontend
#      - step: *run-tests
      - step: *package-application
      - step:
          <<: *deploy
          deployment: production
          variables:
            DEPLOYMENT_ENV: 'production'
