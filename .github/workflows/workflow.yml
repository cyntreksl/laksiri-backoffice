name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - '**'
  push:
    branches:
      - main
      - stage
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'stage'

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: let_me_in
          MYSQL_DATABASE: testing
          MYSQL_USER: homestead
          MYSQL_PASSWORD: secret
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
      redis:
        image: redis:6.2
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - uses: actions/checkout@v4

      # ✅ Setup PHP
      - name: Set up PHP 8.3
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3
          extensions: zip, gd, pcntl, pdo_mysql, exif, bcmath
          ini-values: post_max_size=256M, upload_max_filesize=256M
          coverage: none

      # ✅ Install system dependencies
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip libzip-dev libpng-dev zip git mariadb-client

      # ✅ Composer & Laravel setup
      - name: Install Composer
        run: |
          curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

      - name: Copy .env if not exists
        run: |
          if [ ! -f .env ]; then cp .env.example .env; fi

      - name: Install PHP dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Generate app key
        run: php artisan key:generate

      # ✅ Setup Node.js and build frontend
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20.17.0
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Build frontend assets
        run: npm run build

      # ✅ Prepare deployment package
      - name: Create deployment archive
        run: |
          zip -r application.zip . -x "*.git*" "node_modules/*" "tests/*" ".github/*" "vendor/*"

      - name: Upload application artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-zip
          path: application.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || (github.ref == 'refs/heads/stage' && 'stage' || 'stage')) }}

    steps:
      - name: Download application artifact
        uses: actions/download-artifact@v4
        with:
          name: application-zip
          path: .

      # ✅ Setup SSH for deployment
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Add remote host to known_hosts
        run: ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts

      # ✅ Transfer and deploy
      - name: Upload and deploy application
        run: |
          scp application.zip ${{ secrets.EC2_USER }}@${{ secrets.HOST }}:/tmp/app.zip
          ssh ${{ secrets.EC2_USER }}@${{ secrets.HOST }} bash -s << 'EOF'
          unzip -o /tmp/app.zip -d /var/www/laksiri-backoffice
          cd /var/www/laksiri-backoffice
          composer install --no-dev --optimize-autoloader
          php artisan migrate --force
          php artisan db:seed --force
          php artisan config:clear
          php artisan cache:clear
          php artisan view:clear
          php artisan route:clear
          php artisan sidecar:deploy --activate
          chown -R www-data:www-data /var/www/laksiri-backoffice
          EOF
